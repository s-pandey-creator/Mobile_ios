{"uid":"ba433ccbf4b6e6e4","name":"test_logout","fullName":"tests.test_login#test_logout","historyId":"8cef52c80b414705e6d2c1fdbeb1dc86","time":{"start":1757944959005,"stop":1757944959005,"duration":0},"description":"User can log out after logging in.","descriptionHtml":"<p>User can log out after logging in.</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: App Automate testing time has expired. Contact BrowserStack Support at https://www.browserstack.com/contact for extending your Free Trial.","statusTrace":"request = <SubRequest 'driver' for <Function test_logout>>\n\n    @pytest.fixture(scope=\"function\")\n    def driver(request):\n        \"\"\"Start an Appium session on BrowserStack and yield driver.\"\"\"\n        options = _build_options()\n        hub = \"https://hub-cloud.browserstack.com/wd/hub\"\n>       driver = webdriver.Remote(command_executor=hub, options=options)\n\nconftest.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\db595\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\appium\\webdriver\\webdriver.py:229: in __init__\n    super().__init__(\nC:\\Users\\db595\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:212: in __init__\n    self.start_session(capabilities)\nC:\\Users\\db595\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\appium\\webdriver\\webdriver.py:321: in start_session\n    response = self.execute(RemoteCommand.NEW_SESSION, w3c_caps)\nC:\\Users\\db595\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D5462D3750>\nresponse = {'sessionId': '', 'status': 13, 'value': {'error': 'App Automate testing time has expired. Contact BrowserStack Suppor...ime has expired. Contact BrowserStack Support at https://www.browserstack.com/contact for extending your Free Trial.'}}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: App Automate testing time has expired. Contact BrowserStack Support at https://www.browserstack.com/contact for extending your Free Trial.\n\nC:\\Users\\db595\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":true,"beforeStages":[{"name":"driver","time":{"start":1757944959005,"stop":1757944961973,"duration":2968},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: App Automate testing time has expired. Contact BrowserStack Support at https://www.browserstack.com/contact for extending your Free Trial.\n\n","statusTrace":"  File \"C:\\Users\\db595\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pluggy\\_callers.py\", line 38, in run_old_style_hookwrapper\n    res = yield\n          ^^^^^\n  File \"C:\\Users\\db595\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pluggy\\_callers.py\", line 139, in _multicall\n    teardown.throw(exception)\n    ~~~~~~~~~~~~~~^^^^^^^^^^^\n  File \"C:\\Users\\db595\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pluggy\\_callers.py\", line 53, in run_old_style_hookwrapper\n    return result.get_result()\n           ~~~~~~~~~~~~~~~~~^^\n  File \"C:\\Users\\db595\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pluggy\\_result.py\", line 103, in get_result\n    raise exc.with_traceback(tb)\n  File \"C:\\Users\\db595\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pluggy\\_callers.py\", line 38, in run_old_style_hookwrapper\n    res = yield\n          ^^^^^\n  File \"C:\\Users\\db595\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pluggy\\_callers.py\", line 139, in _multicall\n    teardown.throw(exception)\n    ~~~~~~~~~~~~~~^^^^^^^^^^^\n  File \"C:\\Users\\db595\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pluggy\\_callers.py\", line 53, in run_old_style_hookwrapper\n    return result.get_result()\n           ~~~~~~~~~~~~~~~~~^^\n  File \"C:\\Users\\db595\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pluggy\\_result.py\", line 103, in get_result\n    raise exc.with_traceback(tb)\n  File \"C:\\Users\\db595\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pluggy\\_callers.py\", line 38, in run_old_style_hookwrapper\n    res = yield\n          ^^^^^\n  File \"C:\\Users\\db595\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pluggy\\_callers.py\", line 121, in _multicall\n    res = hook_impl.function(*args)\n  File \"C:\\Users\\db595\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py\", line 1123, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"C:\\Users\\db595\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py\", line 895, in call_fixture_func\n    fixture_result = next(generator)\n  File \"C:\\assignment\\mobile_ios\\conftest.py\", line 37, in driver\n    driver = webdriver.Remote(command_executor=hub, options=options)\n  File \"C:\\Users\\db595\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\appium\\webdriver\\webdriver.py\", line 229, in __init__\n    super().__init__(\n    ~~~~~~~~~~~~~~~~^\n        command_executor=command_executor,\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n        options=options,\n        ^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"C:\\Users\\db595\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 212, in __init__\n    self.start_session(capabilities)\n    ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File \"C:\\Users\\db595\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\appium\\webdriver\\webdriver.py\", line 321, in start_session\n    response = self.execute(RemoteCommand.NEW_SESSION, w3c_caps)\n  File \"C:\\Users\\db595\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 354, in execute\n    self.error_handler.check_response(response)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"C:\\Users\\db595\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":0}],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_login"},{"name":"host","value":"DB-L-174"},{"name":"thread","value":"11376-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"4c83e84b3b3bd692","status":"passed","time":{"start":1757944939709,"stop":1757944949878,"duration":10169}},{"uid":"ca96b2c29c2d57a7","status":"passed","time":{"start":1757944801316,"stop":1757944810271,"duration":8955}}],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"ba433ccbf4b6e6e4.json","parameterValues":[]}