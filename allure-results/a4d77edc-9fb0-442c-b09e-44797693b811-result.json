{"name": "test_sorting_by_price", "status": "failed", "statusDetails": {"message": "AssertionError: Prices not sorted ascending: [15.99, 7.99, 49.99, 15.99, 9.99, 29.99]\nassert [15.99, 7.99,..., 9.99, 29.99] == [7.99, 9.99, ... 29.99, 49.99]\n  At index 0 diff: 15.99 != 7.99\n  Use -v to get more diff", "trace": "driver = <appium.webdriver.webdriver.WebDriver (session=\"c52b83c1668dc6d8d7d58dea838fcb8e6fd6766f\")>\n\n    def test_sorting_by_price(driver):\n        login(driver)\n        pp = ProductsPage(driver)\n        pp.wait_for_products()\n    \n        # ---- robust attempt to open the sort control (many fallbacks) ----\n        sort_opened = False\n        sort_attempt_errors = []\n    \n        sort_candidates = [\n            (AppiumBy.ACCESSIBILITY_ID, \"test-Modal Selector Button\"),\n            (AppiumBy.ACCESSIBILITY_ID, \"test-Toggle\"),\n            (AppiumBy.ACCESSIBILITY_ID, \"test-Sort\"),\n            (AppiumBy.ACCESSIBILITY_ID, \"test-Menu\"),\n            (AppiumBy.IOS_PREDICATE, \"label CONTAINS 'Sort' OR name CONTAINS 'Sort'\"),\n            (AppiumBy.XPATH, \"//*[contains(translate(@label,'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz'),'sort') or contains(translate(@name,'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz'),'sort')]\"),\n        ]\n    \n        for by, val in sort_candidates:\n            try:\n                el = driver.find_element(by, val)\n                try:\n                    el.click()\n                except Exception:\n                    try:\n                        driver.execute_script(\"mobile: tap\", {\"element\": el.id})\n                    except Exception:\n                        try:\n                            loc = el.location\n                            size = el.size\n                            driver.execute_script(\"mobile: tap\", {\"x\": int(loc['x'] + size['width'] / 2), \"y\": int(loc['y'] + size['height'] / 2)})\n                        except Exception:\n                            pass\n                sort_opened = True\n                break\n            except Exception as e:\n                sort_attempt_errors.append(f\"{by}={val} -> {e}\")\n    \n        if not sort_opened:\n            pytest.skip(f\"Sort button not found on this build. Attempts: {sort_attempt_errors}\")\n    \n        # ---- robust attempt to pick \"Price (low to high)\" or equivalent ----\n        opt_clicked = False\n        option_candidates = [\n            (AppiumBy.IOS_PREDICATE, \"label CONTAINS 'low to high'\"),\n            (AppiumBy.XPATH, \"//*[contains(translate(@label,'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz'),'low to high') or contains(translate(@name,'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz'),'low to high')]\"),\n            (AppiumBy.XPATH, \"//*[contains(translate(@label,'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz'),'price') and contains(translate(@label,'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz'),'low')]\"),\n            (AppiumBy.XPATH, \"//*[contains(translate(@label,'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz'),'price') and contains(translate(@label,'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz'),'high') and contains(translate(@label,'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz'),'low')]\"),\n            (AppiumBy.XPATH, \"//XCUIElementTypeStaticText[contains(translate(@label,'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz'),'low') and contains(translate(@label,'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz'),'high')]\")\n        ]\n    \n        for by, val in option_candidates:\n            try:\n                opt = driver.find_element(by, val)\n                try:\n                    opt.click()\n                except Exception:\n                    driver.execute_script(\"mobile: tap\", {\"element\": opt.id})\n                opt_clicked = True\n                break\n            except Exception:\n                continue\n    \n        if not opt_clicked:\n            # Best-effort: select the first choice in the modal/list\n            try:\n                first_choice = driver.find_element(AppiumBy.XPATH, \"(//XCUIElementTypeCell|//XCUIElementTypeOther|//XCUIElementTypeStaticText)[1]\")\n                try:\n                    first_choice.click()\n                except Exception:\n                    driver.execute_script(\"mobile: tap\", {\"element\": first_choice.id})\n                opt_clicked = True\n            except Exception:\n                pytest.skip(\"Sort option not found on this build\")\n    \n        # allow UI to update after choosing sort\n        time.sleep(1.5)\n    \n        # After sorting, get product prices using robust collection\n        prices = _collect_prices_after_sort(driver)\n        print(f\"[DEBUG] Prices collected after sorting: {prices}\")\n    \n        # If we couldn't find prices at all, fail with helpful info\n        if not prices:\n            # dump some page_source snippet for debugging (first 2000 chars)\n            src_snip = (driver.page_source or \"\")[:2000]\n            pytest.fail(\"No prices found after sorting. Page-source start:\\n\" + src_snip)\n    \n        # verify ascending order\n>       assert prices == sorted(prices), f\"Prices not sorted ascending: {prices}\"\nE       AssertionError: Prices not sorted ascending: [15.99, 7.99, 49.99, 15.99, 9.99, 29.99]\nE       assert [15.99, 7.99,..., 9.99, 29.99] == [7.99, 9.99, ... 29.99, 49.99]\nE         At index 0 diff: 15.99 != 7.99\nE         Use -v to get more diff\n\ntests\\test_products_cart_sorting.py:262: AssertionError"}, "start": 1758024648215, "stop": 1758024661219, "uuid": "51b7e43f-dc90-49cf-b14c-19d57637dcdc", "historyId": "9a088125d44c350e3ba79d110eea5bb3", "testCaseId": "f53a28c62ea3db8c900cfbc05db17b3d", "fullName": "tests.test_products_cart_sorting#test_sorting_by_price", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_products_cart_sorting"}, {"name": "host", "value": "DB-L-174"}, {"name": "thread", "value": "4272-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_products_cart_sorting"}]}