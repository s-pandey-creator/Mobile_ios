{"name": "test_sorting_by_price", "status": "failed", "statusDetails": {"message": "AssertionError: Prices not sorted ascending: [7.99, 9.99, 15.99, 29.99, 49.99, 7.99, 9.99, 15.99, 29.99, 49.99]\n  Original prices: [29.99, 9.99, 15.99, 49.99, 7.99, 29.99, 9.99, 15.99, 49.99, 7.99]\n  If this fails, paste the full debug output and the page-source snippet so I can tune the locators.\nassert [7.99, 9.99, ...99, 7.99, ...] == [7.99, 7.99, ...9, 15.99, ...]\n  At index 1 diff: 9.99 != 7.99\n  Use -v to get more diff", "trace": "driver = <appium.webdriver.webdriver.WebDriver (session=\"9c8d09dae1083f9f2b611d8c47bd15be89a249fa\")>\n\n    def test_sorting_by_price(driver):\n        \"\"\"\n        Robust sort test: open sort UI, try to select 'Price (low to high)' (or best-effort),\n        then collect prices and assert they are in ascending order.\n        \"\"\"\n        # ensure logged in\n        login(driver)\n    \n        # Wait for products to be present\n        from pages.products_page import ProductsPage\n        pp = ProductsPage(driver)\n        pp.wait_for_products()\n    \n        # Original prices (before choosing any option) - capture for debug\n        original_prices = _collect_prices_after_sort(driver)\n        print(f\"[DEBUG] Original prices: {original_prices}\")\n    \n        # open sort control\n        opened = _open_sort_control(driver)\n        if not opened:\n            pytest.skip(\"Could not open sort control on this build\")\n    \n        # choose preferred sort option\n        chosen_text, ok = _choose_sort_option(driver, prefer_text=\"Price (low to high)\")\n        print(f\"[DEBUG] Chosen sort option text: {chosen_text!r}, clicked_ok={ok}\")\n    \n        # allow UI to update\n        time.sleep(1.0)\n    \n        # collect prices after choosing option\n        prices_after = _collect_prices_after_sort(driver)\n        print(f\"[DEBUG] Prices after selecting option '{chosen_text}': {prices_after}\")\n    \n        # If no prices were found, fail with page-source snippet for debugging\n        if not prices_after:\n            src_snip = (driver.page_source or \"\")[:2000]\n            pytest.fail(\"No prices found after sorting. Page-source start:\\n\" + src_snip)\n    \n        # If we can't get ascending order but we did click something, try a second attempt:\n        if prices_after != sorted(prices_after):\n            # re-open and attempt to explicitly select \"Price (low to high)\" if we didn't earlier\n            if not (chosen_text and \"low\" in (chosen_text or \"\").lower()):\n                # try to re-open and explicitly select 'Price (low to high)' again\n                _open_sort_control(driver)\n                txt2, ok2 = _choose_sort_option(driver, prefer_text=\"Price (low to high)\")\n                print(f\"[DEBUG] Retry chosen '{txt2}', ok={ok2}\")\n                time.sleep(1.0)\n                prices_after = _collect_prices_after_sort(driver)\n                print(f\"[DEBUG] Prices after retry selecting '{txt2}': {prices_after}\")\n    \n        # Final assertion: prices should be ascending\n>       assert prices_after == sorted(prices_after), (\n            f\"Prices not sorted ascending: {prices_after}\\n\"\n            f\"Original prices: {original_prices}\\n\"\n            \"If this fails, paste the full debug output and the page-source snippet so I can tune the locators.\"\n        )\nE       AssertionError: Prices not sorted ascending: [7.99, 9.99, 15.99, 29.99, 49.99, 7.99, 9.99, 15.99, 29.99, 49.99]\nE         Original prices: [29.99, 9.99, 15.99, 49.99, 7.99, 29.99, 9.99, 15.99, 49.99, 7.99]\nE         If this fails, paste the full debug output and the page-source snippet so I can tune the locators.\nE       assert [7.99, 9.99, ...99, 7.99, ...] == [7.99, 7.99, ...9, 15.99, ...]\nE         At index 1 diff: 9.99 != 7.99\nE         Use -v to get more diff\n\ntests\\test_products_cart_sorting.py:329: AssertionError"}, "description": "\nRobust sort test: open sort UI, try to select 'Price (low to high)' (or best-effort),\nthen collect prices and assert they are in ascending order.\n", "start": 1758029368214, "stop": 1758029389988, "uuid": "f121592b-3c3f-451a-9d33-5b36fb2547a3", "historyId": "9a088125d44c350e3ba79d110eea5bb3", "testCaseId": "f53a28c62ea3db8c900cfbc05db17b3d", "fullName": "tests.test_products_cart_sorting#test_sorting_by_price", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_products_cart_sorting"}, {"name": "host", "value": "DB-L-174"}, {"name": "thread", "value": "6748-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_products_cart_sorting"}]}