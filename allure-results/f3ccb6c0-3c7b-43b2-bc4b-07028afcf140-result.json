{"name": "test_add_product_to_cart_and_verify", "status": "broken", "statusDetails": {"message": "Exception: Clicked Add buttons but none produced a detectable success signal.", "trace": "self = <pages.products_page.ProductsPage object at 0x000002162C45C050>, verify_with_cart = True, verify_timeout = 6\n\n    def add_first_product_to_cart(self, verify_with_cart=True, verify_timeout=6):\n        \"\"\"\n        Try each visible 'ADD TO CART' button until one of them yields a success signal.\n        Success signals tried (in order):\n          - 'REMOVE' label appears\n          - open cart and cart has at least one item (uses CartPage.get_cart_items)\n          - page_source contains 'REMOVE' (fallback)\n        Returns the best-effort product_name (or None if undeterminable).\n        \"\"\"\n        btns = self.driver.find_elements(*self.add_to_cart_pred)\n        if not btns:\n            raise Exception(\"No Add to Cart buttons found\")\n    \n        from pages.cart_page import CartPage  # local import to avoid circular at module load\n    \n        last_exc = None\n        for i, btn in enumerate(btns):\n            product_name = self._get_nearby_product_name(btn)\n            try:\n>               btn.click()\n\npages\\products_page.py:101: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\db595\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\Users\\db595\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nC:\\Users\\db595\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x000002162C45DA90>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"The element identified by \\\\\"DA000000...er (/nix/store/ccv9zazlbx9h9dzj4rfkvhvyapfrdhlq-appium-2.0.0/packages/base-driver/lib/protocol/protocol.js:313:19)\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        https://www.w3.org/TR/webdriver/#errors\n        \"\"\"\n        payload = response.get('value', '')\n        if isinstance(payload, dict):\n            payload_dict = payload\n        else:\n            try:\n                payload_dict = json.loads(payload)\n            except (json.JSONDecodeError, TypeError):\n                return\n            if not isinstance(payload_dict, dict):\n                return\n        value = payload_dict.get('value')\n        if not isinstance(value, dict):\n            return\n        error = value.get('error')\n        if not error:\n            return\n    \n        message = value.get('message', error)\n        stacktrace = value.get('stacktrace', '')\n        # In theory, we should also be checking HTTP status codes.\n        # Java client, for example, prints a warning if the actual `error`\n        # value does not match to the response's HTTP status code.\n        exception_class: Type[sel_exceptions.WebDriverException] = ERROR_TO_EXC_MAPPING.get(\n            error, sel_exceptions.WebDriverException\n        )\n        if exception_class is sel_exceptions.WebDriverException and message:\n            if message == 'No such context found.':\n                exception_class = appium_exceptions.NoSuchContextException\n            elif message == 'That command could not be executed in the current context.':\n                exception_class = appium_exceptions.InvalidSwitchToTargetException\n    \n        if exception_class is sel_exceptions.UnexpectedAlertPresentException:\n            raise sel_exceptions.UnexpectedAlertPresentException(\n                msg=message,\n                stacktrace=format_stacktrace(stacktrace),\n                alert_text=value.get('data'),\n            )\n>       raise exception_class(msg=message, stacktrace=format_stacktrace(stacktrace))\nE       selenium.common.exceptions.StaleElementReferenceException: Message: The element identified by \"DA000000-0000-0000-EC0A-000000000000\" is either not present or it has expired from the internal cache. Try to find it again; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       StaleElementReferenceError: The element identified by \"DA000000-0000-0000-EC0A-000000000000\" is either not present or it has expired from the internal cache. Try to find it again\nE           at errorFromW3CJsonCode (/nix/store/ccv9zazlbx9h9dzj4rfkvhvyapfrdhlq-appium-2.0.0/packages/appium/xcuitest/4.12.2/node_modules/appium/node_modules/@appium/base-driver/lib/protocol/errors.js:923:25)\nE           at ProxyRequestError.getActualError (/nix/store/ccv9zazlbx9h9dzj4rfkvhvyapfrdhlq-appium-2.0.0/packages/appium/xcuitest/4.12.2/node_modules/appium/node_modules/@appium/base-driver/lib/protocol/errors.js:798:14)\nE           at JWProxy.command (/nix/store/ccv9zazlbx9h9dzj4rfkvhvyapfrdhlq-appium-2.0.0/packages/appium/xcuitest/4.12.2/node_modules/appium/node_modules/@appium/base-driver/lib/jsonwp-proxy/proxy.js:340:19)\nE           at runMicrotasks (<anonymous>)\nE           at processTicksAndRejections (internal/process/task_queues.js:95:5)\nE           at XCUITestDriver.proxyCommand (/nix/store/ccv9zazlbx9h9dzj4rfkvhvyapfrdhlq-appium-2.0.0/packages/appium/xcuitest/4.12.2/node_modules/appium-xcuitest-driver/lib/commands/proxy-helper.js:95:12)\nE           at defaultBehavior (/nix/store/ccv9zazlbx9h9dzj4rfkvhvyapfrdhlq-appium-2.0.0/packages/appium/lib/appium.js:587:16)\nE           at ImageElementPlugin.handle (/nix/store/ccv9zazlbx9h9dzj4rfkvhvyapfrdhlq-appium-2.0.0/packages/appium/xcuitest/4.12.2/node_modules/@appium/images-plugin/lib/plugin.js:77:12)\nE           at /nix/store/ccv9zazlbx9h9dzj4rfkvhvyapfrdhlq-appium-2.0.0/packages/appium/lib/appium.js:647:16\nE           at AppiumDriver.executeWrappedCommand (/nix/store/ccv9zazlbx9h9dzj4rfkvhvyapfrdhlq-appium-2.0.0/packages/appium/lib/appium.js:680:16)\nE           at AppiumDriver.executeCommand (/nix/store/ccv9zazlbx9h9dzj4rfkvhvyapfrdhlq-appium-2.0.0/packages/appium/lib/appium.js:609:17)\nE           at asyncHandler (/nix/store/ccv9zazlbx9h9dzj4rfkvhvyapfrdhlq-appium-2.0.0/packages/base-driver/lib/protocol/protocol.js:313:19)\n\nC:\\Users\\db595\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\appium\\webdriver\\errorhandler.py:125: StaleElementReferenceException\n\nThe above exception was the direct cause of the following exception:\n\ndriver = <appium.webdriver.webdriver.WebDriver (session=\"1c62135bca947e4bcfd7f839566785ea9941b49f\")>\n\n    def test_add_product_to_cart_and_verify(driver):\n        login(driver)\n        pp = ProductsPage(driver)\n        pp.wait_for_products()\n        titles = pp.get_all_product_titles()\n        print(f\"[DEBUG] Product titles available: {titles}\")\n        assert titles, \"No products found\"\n    \n        # click first add button and get best-effort product name\n>       first_product = pp.add_first_product_to_cart()\n\ntests\\test_products_cart_sorting.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.products_page.ProductsPage object at 0x000002162C45C050>, verify_with_cart = True, verify_timeout = 6\n\n    def add_first_product_to_cart(self, verify_with_cart=True, verify_timeout=6):\n        \"\"\"\n        Try each visible 'ADD TO CART' button until one of them yields a success signal.\n        Success signals tried (in order):\n          - 'REMOVE' label appears\n          - open cart and cart has at least one item (uses CartPage.get_cart_items)\n          - page_source contains 'REMOVE' (fallback)\n        Returns the best-effort product_name (or None if undeterminable).\n        \"\"\"\n        btns = self.driver.find_elements(*self.add_to_cart_pred)\n        if not btns:\n            raise Exception(\"No Add to Cart buttons found\")\n    \n        from pages.cart_page import CartPage  # local import to avoid circular at module load\n    \n        last_exc = None\n        for i, btn in enumerate(btns):\n            product_name = self._get_nearby_product_name(btn)\n            try:\n                btn.click()\n            except Exception as e:\n                last_exc = e\n                continue\n    \n            # wait briefly for UI to update\n            start = time.time()\n            success = False\n            while time.time() - start < verify_timeout:\n                # 1) look for REMOVE via predicate\n                try:\n                    removes = self.driver.find_elements(AppiumBy.IOS_PREDICATE, 'label CONTAINS \"REMOVE\" or name CONTAINS \"REMOVE\"')\n                    if removes:\n                        success = True\n                        break\n                except Exception:\n                    pass\n    \n                # 2) try to open cart and validate items\n                if verify_with_cart:\n                    try:\n                        cart = CartPage(self.driver)\n                        cart.open_cart()\n                        items = cart.get_cart_items()\n                        # close the cart (back) if possible: try a 'back' button (menu close)\n                        try:\n                            close_btn = self.driver.find_elements(AppiumBy.IOS_PREDICATE, 'label CONTAINS \"menu-close\" or name CONTAINS \"menu-close\"')\n                            if close_btn:\n                                close_btn[0].click()\n                        except Exception:\n                            pass\n                        if items:\n                            success = True\n                            break\n                    except Exception:\n                        # ignore and continue waiting\n                        pass\n    \n                # 3) fallback: page_source contains REMOVE\n                try:\n                    if \"REMOVE\" in (self.driver.page_source or \"\"):\n                        success = True\n                        break\n                except Exception:\n                    pass\n    \n                time.sleep(0.5)\n    \n            if success:\n                return product_name\n            # else try next button\n        # no button succeeded\n>       raise Exception(\"Clicked Add buttons but none produced a detectable success signal.\") from last_exc\nE       Exception: Clicked Add buttons but none produced a detectable success signal.\n\npages\\products_page.py:153: Exception"}, "start": 1757987303546, "stop": 1757987680531, "uuid": "78ac6a61-5533-4157-b1ff-120213af47cb", "historyId": "e5d413b2ccde8642689c0311edb46233", "testCaseId": "b641a45bd3f62d94ae6a9f8c46cf4218", "fullName": "tests.test_products_cart_sorting#test_add_product_to_cart_and_verify", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_products_cart_sorting"}, {"name": "host", "value": "DB-L-174"}, {"name": "thread", "value": "17600-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_products_cart_sorting"}]}