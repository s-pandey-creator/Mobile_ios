{"name": "test_sorting_by_price", "status": "failed", "statusDetails": {"message": "AssertionError: Prices not sorted ascending: [15.99, 7.99, 49.99, 9.99, 29.99]\n  Original prices: [29.99, 9.99, 15.99, 49.99, 7.99]\nassert [15.99, 7.99,..., 9.99, 29.99] == [7.99, 9.99, ... 29.99, 49.99]\n  At index 0 diff: 15.99 != 7.99\n  Use -v to get more diff", "trace": "driver = <appium.webdriver.webdriver.WebDriver (session=\"161ac1ba62cd24c26a857217874528977e8e9d47\")>\n\n    def test_sorting_by_price(driver):\n        \"\"\"\n        Robust sort test: open sort UI, pick 'Price (low to high)' (or best-effort),\n        then assert visible prices are in ascending order (per-product).\n        \"\"\"\n        login(driver)\n        wait_for_products(driver)\n    \n        original_prices = _collect_prices_after_sort(driver)\n        print(f\"[DEBUG] Original prices: {original_prices}\")\n    \n        if not _open_sort_control(driver):\n            pytest.skip(\"Could not open sort control on this build\")\n    \n        chosen_text, ok = _choose_sort_option(driver, prefer_text=\"Price (low to high)\")\n        print(f\"[DEBUG] Chosen sort option text: {chosen_text!r}, clicked_ok={ok}\")\n    \n        time.sleep(1.2)  # let UI update\n        prices_after = _collect_prices_after_sort(driver)\n        print(f\"[DEBUG] Prices after selecting option '{chosen_text}': {prices_after}\")\n    \n        if not prices_after:\n            src = (driver.page_source or \"\")[:2000]\n            pytest.fail(\"No prices found after sorting. Page-source start:\\n\" + src)\n    \n        # If not sorted, try one explicit retry selecting the explicit string\n        if prices_after != sorted(prices_after) and not (chosen_text and \"low\" in (chosen_text or \"\").lower()):\n            _open_sort_control(driver)\n            txt2, ok2 = _choose_sort_option(driver, prefer_text=\"Price (low to high)\")\n            print(f\"[DEBUG] Retry chosen '{txt2}', ok={ok2}\")\n            time.sleep(1.0)\n            prices_after = _collect_prices_after_sort(driver)\n            print(f\"[DEBUG] Prices after retry selecting '{txt2}': {prices_after}\")\n    \n>       assert prices_after == sorted(prices_after), (\n            f\"Prices not sorted ascending: {prices_after}\\nOriginal prices: {original_prices}\"\n        )\nE       AssertionError: Prices not sorted ascending: [15.99, 7.99, 49.99, 9.99, 29.99]\nE         Original prices: [29.99, 9.99, 15.99, 49.99, 7.99]\nE       assert [15.99, 7.99,..., 9.99, 29.99] == [7.99, 9.99, ... 29.99, 49.99]\nE         At index 0 diff: 15.99 != 7.99\nE         Use -v to get more diff\n\ntests\\test_products_cart_sorting.py:597: AssertionError"}, "description": "\nRobust sort test: open sort UI, pick 'Price (low to high)' (or best-effort),\nthen assert visible prices are in ascending order (per-product).\n", "start": 1758030256917, "stop": 1758030287506, "uuid": "2af46e93-3d4c-4ea3-bdf3-0c4ec347ad06", "historyId": "9a088125d44c350e3ba79d110eea5bb3", "testCaseId": "f53a28c62ea3db8c900cfbc05db17b3d", "fullName": "tests.test_products_cart_sorting#test_sorting_by_price", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_products_cart_sorting"}, {"name": "host", "value": "DB-L-174"}, {"name": "thread", "value": "17948-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_products_cart_sorting"}]}