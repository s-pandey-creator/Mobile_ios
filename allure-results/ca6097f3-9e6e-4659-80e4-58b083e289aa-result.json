{"name": "test_add_product_to_cart_and_verify", "status": "failed", "statusDetails": {"message": "AssertionError: No items found in the cart after adding. If this persists, dump the cart page for inspection:\n  \n  python tests/dump_cart_page.py\n  python tests/parse_pagesource.py artifacts/pagesource_cart.xml\n  \n  Then paste the parse output here so I can pin exact cart locators.\nassert []", "trace": "driver = <appium.webdriver.webdriver.WebDriver (session=\"81b2182f19a4768e1d6087860f065983c788b0b1\")>\n\n    def test_add_product_to_cart_and_verify(driver):\n        \"\"\"Add first product to cart and verify cart contains it.\"\"\"\n        login(driver)\n        # import page object (must exist in repo)\n        from pages.products_page import ProductsPage\n        from pages.cart_page import CartPage\n    \n        pp = ProductsPage(driver)\n        pp.wait_for_products()\n    \n        titles = pp.get_all_product_titles()\n        print(f\"[DEBUG] Product titles available: {titles}\")\n        assert titles and len(titles) > 0, \"No products found in catalog\"\n    \n        first_product = pp.add_first_product_to_cart()\n        print(f\"[DEBUG] Clicked Add-to-Cart for: {first_product}\")\n    \n        cart = CartPage(driver)\n        assert cart.open_cart() is True, \"Failed to open cart\"\n    \n        # try to fetch cart items; let underlying page object decide how to read them.\n        items = []\n        try:\n            items = cart.get_cart_items()\n        except Exception as e:\n            print(f\"[DEBUG] cart.get_cart_items() raised: {e}\")\n            # fallback: try reading $ text nodes from page source\n            try:\n                raw_prices = _collect_prices_after_sort(driver)\n                print(f\"[DEBUG] Fallback collected prices in cart view: {raw_prices}\")\n            except Exception:\n                pass\n    \n        print(f\"[DEBUG] Cart items collected: {items}\")\n>       assert items, (\n            \"No items found in the cart after adding. If this persists, dump the cart page for inspection:\\n\\n\"\n            \"python tests/dump_cart_page.py\\n\"\n            \"python tests/parse_pagesource.py artifacts/pagesource_cart.xml\\n\\n\"\n            \"Then paste the parse output here so I can pin exact cart locators.\"\n        )\nE       AssertionError: No items found in the cart after adding. If this persists, dump the cart page for inspection:\nE         \nE         python tests/dump_cart_page.py\nE         python tests/parse_pagesource.py artifacts/pagesource_cart.xml\nE         \nE         Then paste the parse output here so I can pin exact cart locators.\nE       assert []\n\ntests\\test_products_cart_sorting.py:239: AssertionError"}, "description": "Add first product to cart and verify cart contains it.", "start": 1758032238082, "stop": 1758032253500, "uuid": "93bc92f6-e2bf-4def-bc1c-1531c82fb6ca", "historyId": "e5d413b2ccde8642689c0311edb46233", "testCaseId": "b641a45bd3f62d94ae6a9f8c46cf4218", "fullName": "tests.test_products_cart_sorting#test_add_product_to_cart_and_verify", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_products_cart_sorting"}, {"name": "host", "value": "DB-L-174"}, {"name": "thread", "value": "7776-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_products_cart_sorting"}]}