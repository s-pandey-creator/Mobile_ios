{"name": "test_add_product_to_cart_and_verify", "status": "broken", "statusDetails": {"message": "Exception: Clicked Add buttons but none produced a detectable success signal.", "trace": "driver = <appium.webdriver.webdriver.WebDriver (session=\"8154566e47104ce92bc419790dcec44c01947e7f\")>\n\n    def test_add_product_to_cart_and_verify(driver):\n        login(driver)\n        pp = ProductsPage(driver)\n        pp.wait_for_products()\n        titles = pp.get_all_product_titles()\n        print(f\"[DEBUG] Product titles available: {titles}\")\n        assert titles, \"No products found\"\n    \n        # click first add button and get best-effort product name\n>       first_product = pp.add_first_product_to_cart()\n\ntests\\test_products_cart_sorting.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.products_page.ProductsPage object at 0x0000025B023D8050>, verify_with_cart = True, verify_timeout = 8\n\n    def add_first_product_to_cart(self, verify_with_cart=True, verify_timeout=8):\n        \"\"\"\n        Robustly click visible 'ADD TO CART' buttons until one shows success.\n        Success checks:\n          - presence of any element with label/name containing \"REMOVE\"\n          - 'REMOVE' appears in page_source\n          - (when verify_with_cart=True) opening cart and seeing items (best-effort)\n        Returns the best-effort product_name (or None if undeterminable).\n        Raises Exception if none of the add buttons produce a success signal.\n        \"\"\"\n        # count current add buttons\n        initial_btns = self.driver.find_elements(*self.add_to_cart_pred)\n        if not initial_btns:\n            raise Exception(\"No Add to Cart buttons found\")\n    \n        from pages.cart_page import CartPage  # local import to avoid import cycles\n    \n        attempts = len(initial_btns)\n        last_exc = None\n    \n        for idx in range(attempts):\n            # re-find buttons Fresh each attempt to avoid stale references\n            try:\n                btns = self.driver.find_elements(*self.add_to_cart_pred)\n            except WebDriverException as e:\n                last_exc = e\n                btns = []\n    \n            if not btns or idx >= len(btns):\n                # nothing more to try\n                break\n    \n            btn = btns[idx]\n            product_name = self._get_nearby_product_name(btn)\n    \n            try:\n                btn.click()\n            except StaleElementReferenceException:\n                # stale â€” skip to next attempt (will re-find buttons on next loop)\n                last_exc = StaleElementReferenceException(\"stale while clicking\")\n                time.sleep(0.5)\n                continue\n            except Exception as e:\n                last_exc = e\n                time.sleep(0.5)\n                continue\n    \n            # wait for success signal (polling)\n            success = False\n            start = time.time()\n            while time.time() - start < verify_timeout:\n                # 1) look for REMOVE elements\n                try:\n                    removes = self.driver.find_elements(AppiumBy.IOS_PREDICATE, 'label CONTAINS \"REMOVE\" or name CONTAINS \"REMOVE\"')\n                    if removes:\n                        success = True\n                        break\n                except Exception:\n                    pass\n    \n                # 2) check page source for \"REMOVE\" (fallback)\n                try:\n                    if \"REMOVE\" in (self.driver.page_source or \"\"):\n                        success = True\n                        break\n                except Exception:\n                    pass\n    \n                # 3) optionally verify cart contents\n                if verify_with_cart:\n                    try:\n                        cart = CartPage(self.driver)\n                        cart.open_cart()\n                        items = cart.get_cart_items()\n                        # try to close menu if it opened; many builds have a close element with name 'menu-close'\n                        try:\n                            closes = self.driver.find_elements(AppiumBy.IOS_PREDICATE, 'name CONTAINS \"menu-close\" or label CONTAINS \"menu-close\"')\n                            if closes:\n                                try:\n                                    closes[0].click()\n                                except Exception:\n                                    pass\n                        except Exception:\n                            pass\n                        if items:\n                            success = True\n                            break\n                    except Exception:\n                        # ignore and continue waiting\n                        pass\n    \n                time.sleep(0.4)\n    \n            if success:\n                return product_name\n    \n            # if not success, small pause and continue to next button\n            time.sleep(0.4)\n    \n        # final attempt: try clicking first button once more (best-effort)\n        try:\n            btns = self.driver.find_elements(*self.add_to_cart_pred)\n            if btns:\n                try:\n                    btns[0].click()\n                    if \"REMOVE\" in (self.driver.page_source or \"\"):\n                        return self._get_nearby_product_name(btns[0])\n                except Exception:\n                    pass\n        except Exception:\n            pass\n    \n        # nothing worked\n>       raise Exception(\"Clicked Add buttons but none produced a detectable success signal.\") from last_exc\nE       Exception: Clicked Add buttons but none produced a detectable success signal.\n\npages\\products_page.py:196: Exception"}, "start": 1757987941246, "stop": 1757988203235, "uuid": "949c392c-4d59-466a-a41b-407f36f3b643", "historyId": "e5d413b2ccde8642689c0311edb46233", "testCaseId": "b641a45bd3f62d94ae6a9f8c46cf4218", "fullName": "tests.test_products_cart_sorting#test_add_product_to_cart_and_verify", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_products_cart_sorting"}, {"name": "host", "value": "DB-L-174"}, {"name": "thread", "value": "20688-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_products_cart_sorting"}]}